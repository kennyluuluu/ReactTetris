{"version":3,"sources":["gameHelper.js","components/styles/StyledCell.js","tetrominos.js","components/Cell/Cell.js","components/styles/StyledStage.js","components/Stage/Stage.js","components/styles/StyledDisplay.js","components/Display/Display.js","components/styles/StyledStartButton.js","components/StartButton/StartButton.js","images/bg.png","components/styles/StyledTetris.js","hooks/useStage.js","components/Tetris/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","shape","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","Cell","defaultProps","React","memo","StyledStage","height","width","Stage","map","row","cell","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","clearRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","useCallback","STAGE_WIDTH","matrix","newMatrix","_","usePlayer","rotate","updatePlayerPos","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","dir","drop","move","keyCode","times","dropAllTheWay","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a36e5e2d.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\n  export const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\r\n    for(let y = 0; y < player.tetromino.length; y+=1) {\r\n      for(let x = 0; x < player.tetromino[0].length; x+=1) {\r\n        if(player.tetromino[y][x] !== 0) {\r\n          if(!stage[y+player.pos.y + moveY] ||\r\n             !stage[y+player.pos.y + moveY][x+player.pos.x + moveX] ||\r\n              stage[y+player.pos.y + moveY][x+player.pos.x + moveX][1] !== 'clear') {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props=> props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n`","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0,0,0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80, 227, 230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"36, 95, 223\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"223, 173, 36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"223, 217, 36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48, 211, 56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n    ],\r\n    color: \"132, 61, 198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227, 78, 78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Cell.css\";\r\nimport {StyledCell} from '../styles/StyledCell'\r\nimport {TETROMINOS} from  '../../tetrominos'\r\n\r\nconst Cell = ({ type }) => \r\n    <StyledCell type={type} color={TETROMINOS[type].color}></StyledCell>;\r\n\r\nCell.propTypes = {};\r\n\r\nCell.defaultProps = {};\r\n\r\nexport default React.memo(Cell);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props=> props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props=> props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Stage.css\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport {StyledStage} from '../styles/StyledStage'\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nStage.propTypes = {};\r\n\r\nStage.defaultProps = {};\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div `\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"./Display.css\";\r\nimport { StyledDisplay } from \"../styles/StyledDisplay\";\r\n\r\nconst Display = ({ gameOver, text }) => <StyledDisplay>{text}</StyledDisplay>;\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"./StartButton.css\";\r\nimport { StyledStartButton } from \"../styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nStartButton.propTypes = {};\r\n\r\nStartButton.defaultProps = {};\r\n\r\nexport default StartButton;\r\n","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../images/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`;","import {useState, useEffect} from 'react';\r\nimport { createStage} from '../gameHelper';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const clearRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n                if(row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev+1);\r\n                    ack.unshift(new Array(newStage[0].length).fill([0,'clear']));\r\n                } else\r\n                    ack.push(row);\r\n                return ack;\r\n            }, [])\r\n\r\n        const updateStage = prevStage => {\r\n            //flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\r\n            \r\n            // draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if(value !== 0) {\r\n                        newStage[y+player.pos.y][x+player.pos.x] =\r\n                        [value, `${player.collided ? 'merged': 'clear'}`];\r\n                    }\r\n                })\r\n            });\r\n            if(player.collided) {\r\n                resetPlayer();\r\n                return clearRows(newStage);\r\n            }\r\n            return newStage;\r\n        }\r\n        setStage(prev => updateStage(prev));\r\n    },[player, resetPlayer])\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nimport { checkCollision, createStage } from \"../../gameHelper\";\r\n\r\n//components\r\nimport Stage from \"../Stage/Stage\";\r\nimport Display from \"../Display/Display\";\r\nimport StartButton from \"../StartButton/StartButton\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Styled Components\r\nimport \"./Tetris.css\";\r\nimport { StyledTetris, StyledTetrisWrapper } from \"../styles/StyledTetris\";\r\n\r\n// Custom Hooks\r\nimport {useInterval} from  '../../hooks/useInterval';\r\nimport {usePlayer} from '../../hooks/usePlayer';\r\nimport { useStage } from \"../../hooks/useStage\";\r\nimport { useGameStatus} from \"../../hooks/useGameStatus\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, rotate, updatePlayerPos, resetPlayer] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n  const movePlayer = dir => {\r\n    if(!checkCollision(player, stage, {x: dir, y: 0})) {\r\n      updatePlayerPos({x: dir, y: 0})\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  }\r\n\r\n  const drop = () => {\r\n    if(rows > (level+1)*10) {\r\n      setLevel(prev => prev + 1);\r\n      setDropTime(1000/(level+1) + 200);\r\n    }\r\n    if(!checkCollision(player, stage, {x: 0, y: 1})) {\r\n      updatePlayerPos({x: 0, y: 1, collided: false});\r\n    } else {\r\n      if(player.pos.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({x: 0, y: 0, collided: true});\r\n    }\r\n  }\r\n\r\n  const keyUp = ({keyCode}) => {\r\n    if(!gameOver) {\r\n      if(keyCode === 40) {\r\n        setDropTime(1000/(level+1) + 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  }\r\n  \r\n  const dropAllTheWay = () => {\r\n    let times = 0;\r\n    setDropTime(null);\r\n    while(!checkCollision(player, stage, {x: 0, y: times})) {\r\n      times++;\r\n    }\r\n    updatePlayerPos({x: 0, y: times-1, collided: true});\r\n  }\r\n  \r\n  const move = ({keyCode}) => {\r\n    if(!gameOver) {\r\n      if(keyCode === 37) {\r\n        movePlayer(-1)\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if(keyCode === 40) {\r\n        dropPlayer();\r\n      } else if(keyCode === 38) {\r\n        rotate(stage, player.tetromino);\r\n      } else if(keyCode == 86) {\r\n        dropAllTheWay();\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(()=> {\r\n    drop();\r\n  }, dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (<Display gameOver={gameOver} text=\"Game Over\"/>):\r\n          (<div>\r\n            <Display text={\"Score: \" + score} />\r\n            <Display text={\"Rows: \" + rows} />\r\n            <Display text={\"Level: \" + level} />\r\n          </div>)}\r\n          <StartButton callback={startGame}/>\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  )\r\n};\r\n\r\nTetris.propTypes = {};\r\n\r\nTetris.defaultProps = {};\r\n\r\nexport default Tetris;\r\n","import {useState, useCallback} from 'react';\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_HEIGHT, STAGE_WIDTH } from '../gameHelper';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: {x: 0, y: 0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = ((stage, matrix) => {\r\n        const newMatrix = matrix.map((row, y) => {\r\n            return row.map((_, x) => matrix[x][matrix.length-1 - y])\r\n        });\r\n\r\n        // check bounds and collision\r\n        for(let y = 0; y < newMatrix.length; y++) {\r\n            for(let x = 0; x < newMatrix[0].length; x++) {\r\n                if(newMatrix[y][x] !== 0) {\r\n                    if(player.pos.y + y < 0 || player.pos.x + x < 0 || player.pos.y + y >= STAGE_HEIGHT || player.pos.x + x >= STAGE_WIDTH)\r\n                        return;\r\n                    else if(stage[player.pos.y + y][player.pos.x + x][1] !== 'clear') {\r\n                        return;\r\n                    }\r\n                } \r\n            }\r\n        }\r\n\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            tetromino: newMatrix,\r\n        }));\r\n    })\r\n\r\n    // const rotate = (matrix, dir) => {\r\n\r\n    // }\r\n\r\n    const updatePlayerPos = ({x, y, collided}) => {\r\n        setPlayer(prev => ({\r\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n            tetromino: prev.tetromino,\r\n            collided: collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(\r\n        () => {\r\n            setPlayer({\r\n                pos: {x: STAGE_WIDTH / 2 - 2, y: 0},\r\n                tetromino: randomTetromino().shape,\r\n                collided: false,\r\n            })\r\n        },\r\n        [])\r\n    \r\n    return [player, rotate, updatePlayerPos, resetPlayer];\r\n}\r\n","import {useState, useEffect, useCallback} from 'react'\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        if(rowsCleared > 0) {\r\n            setScore(prev => prev + linePoints[rowsCleared-1] * (level+1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}","import React from \"react\";\r\nimport Tetris from \"./components/Tetris/Tetris\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}